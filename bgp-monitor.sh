#!/bin/bash
# BGP Monitor - Script de gerenciamento simplificado

set -e

show_help() {
    echo "BGP Monitor - Sistema de Monitoramento BGP"
    echo ""
    echo "Uso: $0 [COMANDO]"
    echo ""
    echo "Comandos:"
    echo "  start       Inicia o BGP Monitor"
    echo "  stop        Para o BGP Monitor"
    echo "  status      Verifica status do sistema"
    echo "  test        Executa testes b√°sicos"
    echo "  help        Mostra esta ajuda"
    echo ""
}

start_service() {
    echo "üöÄ Iniciando BGP Monitor..."
    python3 -m app.main
}

stop_service() {
    echo "üõë Parando BGP Monitor..."
    pkill -f "app.main" || echo "Processo n√£o encontrado"
}

check_status() {
    echo "üìä Verificando status..."
    curl -s http://localhost:8000/health || echo "‚ùå BGP Monitor n√£o est√° rodando"
}

run_tests() {
    echo "üß™ Executando testes..."
    echo "1. Testando API..."
    curl -s http://localhost:8000/ && echo "‚úÖ API OK"
    echo "2. Testando sa√∫de..."
    curl -s http://localhost:8000/health && echo "‚úÖ Health OK"
}

case "${1:-help}" in
    start) start_service ;;
    stop) stop_service ;;
    status) check_status ;;
    test) run_tests ;;
    *) show_help ;;
esac

check_dependencies() {
    echo "Verificando depend√™ncias..."
    if ! command -v python3 &> /dev/null; then
        echo "‚ùå Python3 n√£o encontrado"
        exit 1
    fi
    
    if ! python3 -c "import fastapi" 2>/dev/null; then
        echo "‚ùå FastAPI n√£o instalado. Execute: $0 install"
        exit 1
    fi
    
    echo "‚úÖ Depend√™ncias OK"
}

start_service() {
    echo "üöÄ Iniciando BGP Monitor..."
    
    # Verificar se o ambiente virtual existe
    if [[ ! -d "venv" ]]; then
        echo "‚ùå Ambiente virtual n√£o encontrado. Execute o script de instala√ß√£o primeiro."
        exit 1
    fi
    
    check_dependencies
    
    if pgrep -f "app.main" > /dev/null; then
        echo "‚ö†Ô∏è  BGP Monitor j√° est√° rodando"
        return 0
    fi
    
    echo "Carregando configura√ß√µes..."
    if [[ ! -f ".env" ]]; then
        echo "‚ö†Ô∏è  Arquivo .env n√£o encontrado, usando configura√ß√µes padr√£o"
    fi
    
    echo "Ativando ambiente virtual..."
    source venv/bin/activate
    
    echo "Iniciando servidor..."
    python -m app.main &
    echo $! > bgp-monitor.pid
    
    sleep 3
    if check_status_quiet; then
        echo "‚úÖ BGP Monitor iniciado com sucesso!"
        echo "üåê API dispon√≠vel em: http://localhost:8000"
        echo "üìä M√©tricas em: http://localhost:8000/metrics"
    else
        echo "‚ùå Falha ao iniciar BGP Monitor"
        exit 1
    fi
}

stop_service() {
    echo "üõë Parando BGP Monitor..."
    
    if [[ -f "bgp-monitor.pid" ]]; then
        PID=$(cat bgp-monitor.pid)
        if kill -0 "$PID" 2>/dev/null; then
            kill "$PID"
            rm -f bgp-monitor.pid
            echo "‚úÖ BGP Monitor parado"
        else
            echo "‚ö†Ô∏è  Processo n√£o encontrado, removendo PID file"
            rm -f bgp-monitor.pid
        fi
    else
        # Tenta matar pelo nome do processo
        if pgrep -f "app.main" > /dev/null; then
            pkill -f "app.main"
            echo "‚úÖ BGP Monitor parado"
        else
            echo "‚ö†Ô∏è  BGP Monitor n√£o estava rodando"
        fi
    fi
}

check_status_quiet() {
    curl -s http://localhost:8000/health > /dev/null 2>&1
}

check_status() {
    echo "üìä Verificando status do BGP Monitor..."
    
    if check_status_quiet; then
        echo "‚úÖ BGP Monitor est√° rodando"
        echo ""
        echo "Status da API:"
        curl -s http://localhost:8000/ | python3 -c "
import json, sys
data = json.load(sys.stdin)
print(f\"  Servi√ßo: {data['service']} v{data['version']}\")
print(f\"  Status: {data['status']}\")
print(f\"  ASN Alvo: {data['target_asn']}\")
print(f\"  Uptime: {data['uptime']}s\")
"
        echo ""
        echo "Sa√∫de do sistema:"
        curl -s http://localhost:8000/health | python3 -c "
import json, sys
data = json.load(sys.stdin)
print(f\"  Status: {data['status']}\")
print(f\"  Componentes saud√°veis: {data['healthy_components']}\")
print(f\"  Total de alertas: {data['total_alerts']}\")
"
    else
        echo "‚ùå BGP Monitor n√£o est√° rodando"
        return 1
    fi
}

run_tests() {
    echo "üß™ Executando testes b√°sicos..."
    
    if ! check_status_quiet; then
        echo "‚ùå BGP Monitor n√£o est√° rodando. Execute: $0 start"
        exit 1
    fi
    
    echo "1. Testando endpoint raiz..."
    if curl -s http://localhost:8000/ > /dev/null; then
        echo "   ‚úÖ OK"
    else
        echo "   ‚ùå Falha"
    fi
    
    echo "2. Testando endpoint de sa√∫de..."
    if curl -s http://localhost:8000/health > /dev/null; then
        echo "   ‚úÖ OK"
    else
        echo "   ‚ùå Falha"
    fi
    
    echo "3. Testando endpoint de m√©tricas..."
    if curl -s http://localhost:8000/metrics > /dev/null; then
        echo "   ‚úÖ OK"
    else
        echo "   ‚ùå Falha"
    fi
    
    echo "4. Testando verifica√ß√µes manuais..."
    if curl -s -X POST http://localhost:8000/monitoring/run-checks > /dev/null; then
        echo "   ‚úÖ OK"
    else
        echo "   ‚ùå Falha"
    fi
    
    echo ""
    echo "üéâ Testes conclu√≠dos!"
}

install_deps() {
    echo "üì¶ Instalando depend√™ncias..."
    
    if [[ ! -f "requirements.txt" ]]; then
        echo "‚ùå Arquivo requirements.txt n√£o encontrado"
        exit 1
    fi
    
    python3 -m pip install -r requirements.txt
    echo "‚úÖ Depend√™ncias instaladas!"
}

show_config() {
    echo "‚öôÔ∏è  Configura√ß√£o atual:"
    echo ""
    
    if [[ -f ".env" ]]; then
        echo "Arquivo .env:"
        grep -E "^[^#]" .env | while IFS='=' read -r key value; do
            if [[ "$key" =~ TOKEN ]]; then
                echo "  $key=***hidden***"
            else
                echo "  $key=$value"
            fi
        done
    else
        echo "  ‚ö†Ô∏è  Arquivo .env n√£o encontrado"
    fi
    
    echo ""
    if check_status_quiet; then
        echo "Configura√ß√£o da API:"
        curl -s http://localhost:8000/config | python3 -c "
import json, sys
data = json.load(sys.stdin)
print(f\"  ASN Alvo: {data['target_asn']}\")
print(f\"  Lat√™ncia M√°xima: {data['max_latency_ms']}ms\")
print(f\"  Upstreams M√≠nimos: {data['min_upstreams']}\")
print(f\"  Intervalos de Check:\")
for check, interval in data['check_intervals'].items():
    print(f\"    {check}: {interval}s\")
"
    fi
}

show_logs() {
    echo "üìù Logs do BGP Monitor (Ctrl+C para sair)..."
    if [[ -f "bgp-monitor.pid" ]]; then
        PID=$(cat bgp-monitor.pid)
        tail -f /proc/$PID/fd/1 2>/dev/null || echo "‚ùå N√£o foi poss√≠vel acessar os logs"
    else
        echo "‚ùå BGP Monitor n√£o est√° rodando ou PID file n√£o encontrado"
    fi
}

case "${1:-help}" in
    start)
        start_service
        ;;
    stop)
        stop_service
        ;;
    restart)
        stop_service
        sleep 2
        start_service
        ;;
    status)
        check_status
        ;;
    test)
        run_tests
        ;;
    install)
        install_deps
        ;;
    config)
        show_config
        ;;
    logs)
        show_logs
        ;;
    help|*)
        show_help
        ;;
esac
